// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RockPaperScissorsServiceClient is the client API for RockPaperScissorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RockPaperScissorsServiceClient interface {
	GetUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserResponse, error)
}

type rockPaperScissorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRockPaperScissorsServiceClient(cc grpc.ClientConnInterface) RockPaperScissorsServiceClient {
	return &rockPaperScissorsServiceClient{cc}
}

func (c *rockPaperScissorsServiceClient) GetUser(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/main.RockPaperScissorsService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RockPaperScissorsServiceServer is the server API for RockPaperScissorsService service.
// All implementations should embed UnimplementedRockPaperScissorsServiceServer
// for forward compatibility
type RockPaperScissorsServiceServer interface {
	GetUser(context.Context, *Empty) (*UserResponse, error)
}

// UnimplementedRockPaperScissorsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRockPaperScissorsServiceServer struct {
}

func (UnimplementedRockPaperScissorsServiceServer) GetUser(context.Context, *Empty) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

// UnsafeRockPaperScissorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RockPaperScissorsServiceServer will
// result in compilation errors.
type UnsafeRockPaperScissorsServiceServer interface {
	mustEmbedUnimplementedRockPaperScissorsServiceServer()
}

func RegisterRockPaperScissorsServiceServer(s grpc.ServiceRegistrar, srv RockPaperScissorsServiceServer) {
	s.RegisterService(&RockPaperScissorsService_ServiceDesc, srv)
}

func _RockPaperScissorsService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockPaperScissorsServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RockPaperScissorsService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockPaperScissorsServiceServer).GetUser(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RockPaperScissorsService_ServiceDesc is the grpc.ServiceDesc for RockPaperScissorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RockPaperScissorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RockPaperScissorsService",
	HandlerType: (*RockPaperScissorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _RockPaperScissorsService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
